with "config";
with "utilada_core";
with "utilada_base";
@WITH_XML_ADA@

library project UtilAda_Sys is
   Version := "@UTIL_VERSION@";
   Library_Dir := "lib";

   type Xml_Version_Type is ("none", "3", "4");

   type Os_Version_Type is ("none", "unix", "windows",
                            "linux32", "linux64", "win32", "win64", "macos64",
                            "netbsd32", "netbsd64", "freebsd32", "freebsd64");

   Xml_Version : Xml_Version_Type := "@VERSION_XML_ADA@";
   Has_Xml     : Config.Yes_No := "@HAVE_XML_ADA@";
   Has_Lzma    : Config.Yes_No := "@UTIL_HAVE_LZMA@";

   Os_Version  : Os_Version_Type := "@UTIL_OS_VERSION@";

   --  Enable the compilation of Util.Serialize.Mappers.Vector_Mappers.
   Has_Vector_Mappers : Config.Yes_No := "@UTIL_HAVE_VECTOR_MAPPERS@";

   Library_Type : Config.Library_Type_Type := external ("UTIL_LIBRARY_TYPE", "static");

   for Source_Dirs use ("src/sys",
                        "src/sys/serialize",
                        "src/sys/streams",
                        "src/sys/measures",
                        "src/sys/encoders",
                        "src/sys/http");

   case Os_Version is
      when "none" =>
         null;

      when "win64" | "win32" =>
         for Source_Dirs use Project'Source_Dirs
            & ("src/sys/processes",
               "src/sys/os-windows",
               "src/sys/os-" & Os_Version);

      when "unix" =>
         --  Unix with utilgen generated files
         for Source_Dirs use Project'Source_Dirs
            & ("src/sys/processes",
               "src/sys/os-unix",
               "src/sys/os-generated");

      when "windows" =>
         --  Windows with utilgen generated files
         -- (!!! requires correct gcc version to compile utilgen)
         for Source_Dirs use Project'Source_Dirs
            & ("src/sys/processes",
               "src/sys/os-windows",
               "src/sys/os-generated");

      when others =>
         for Source_Dirs use Project'Source_Dirs
            & ("src/sys/processes",
               "src/sys/os-unix",
               "src/sys/os-" & Os_Version);

   end case;

   for Library_Name use "utilada_sys";
   for Library_Kind use Library_Type;
   for Library_Version use "lib" & Project'Library_Name & ".so." & Version;

   case Has_XML is
      when "yes" =>
          for Source_Dirs use Project'Source_Dirs & ("src/sys/serialize/xml");

      when "no" =>
         null;
   end case;

   package Naming is
      case Xml_Version is
         when "4" =>
            for Implementation ("Util.Serialize.IO.XML.Get_Location")
               use "util-serialize-io-xml-get_location-xmlada-4.adb";

         when "3" =>
            for Implementation ("Util.Serialize.IO.XML.Get_Location")
               use "util-serialize-io-xml-get_location-xmlada-3.adb";

         when "none" =>

      end case;
   end Naming;

   --  GCC 4.7 fails to build the Vector_Mapper generic package.
   case Has_Vector_Mappers is
      when "no" =>
         for Excluded_Source_Files use ("util-serialize-mappers-vector_mapper.ads",
                     "util-serialize-mappers-vector_mapper.adb",
                     "util-http-rest-rest_get_vector.ads",
                     "util-http-rest-rest_get_vector.adb");

      when "yes" =>
         null;

   end case;

   case Library_Type is
     when "relocatable" =>
        for Library_Options use (@UTIL_LIBRARY_OPTIONS@);

     when others =>
        null;
   end case;

   for Library_Dir use "lib/" & Project'Library_Name & "/" & Project'Library_Kind;
   for Object_Dir use "obj/" & Project'Library_Name & "/" & Project'Library_Kind;

   package Builder  renames Config.Builder;
   package Compiler renames Config.Compiler;
   package Ide      renames Config.Ide;

   package Binder is
      for Default_Switches ("Ada") use Config.Binder'Default_Switches ("Ada") & ("-a");
   end Binder;

end UtilAda_Sys;
