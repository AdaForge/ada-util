## The type of library we want to build. Possible values:
##   relocatable
##   static
UTIL_LIBRARY_TYPE=static

# You may edit this makefile as long as you keep these original 
# target names defined.
MODE=debug
GNATMAKE=@GNATMAKE@
GNATCLEAN=@GNATCLEAN@
GPRINSTALL=@GPRINSTALL@
INSTALL=@INSTALL@
DYNAMO=dynamo

GPRPATH=util.gpr
UTIL_HTTP_GPRPATH=util_http.gpr
UTIL_HTTP_CURL_GPRPATH=util_http_curl.gpr
UTIL_HTTP_AWS_GPRPATH=util_http_aws.gpr
TESTUTIL_GPRPATH=util_unit.gpr

BUILDS_SHARED=@BUILDS_SHARED@

version=@UTIL_VERSION@

distdir=ada-util-@UTIL_VERSION@

DIST_FILE=ada-util-@UTIL_VERSION@.tar.gz

XML_SRC_DIR=@UTIL_XML_DIR@
ASM_SRC_DIR=@UTIL_ASM_DIR@
OS_SRC_DIR=@UTIL_OS_DIR@
OS_VERSION=@UTIL_OS_VERSION@
AUNIT_SRC_DIR=@UTIL_AUNIT_DIR@
AHVEN_SRC_DIR=@UTIL_AHVEN_DIR@
AHVEN_SRC_OS_DIR=@UTIL_AHVEN_OS_DIR@

HAVE_XML=@UTIL_HAVE_XML@
HAVE_CURL=@UTIL_HAVE_CURL@
HAVE_AWS=@UTIL_HAVE_AWS@
HAVE_LZMA=@UTIL_HAVE_LZMA@
HAVE_VECTOR_MAPPERS=@UTIL_HAVE_VECTOR_MAPPERS@
HAVE_PRJ_DIRECTORIES=@UTIL_HAVE_PRJ_DIRECTORIES@
HAVE_PANDOC=@HAVE_PANDOC@
HAVE_DYNAMO=@HAVE_DYNAMO@

LN_S=@LN_S@
MKDIR=mkdir
CP=cp
LN=ln -s
CC=@CC@
CFLAGS=@CFLAGS@ @DEFS@

ifeq (${OS},Windows_NT)
LIBEXT=dll
LIBVER=dll
else
LIBEXT=so
LIBVER=so.$(version)
endif

srcdir = .
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
top_builddir = .

# share/ada/adainclude
infix_inc=@ADA_INC_BASE@

# share/ada/adainclude
infix_prj=@ADA_PRJ_BASE@

# lib
infix_lib=@ADA_LIB_BASE@

# lib/ada/adalib
infix_ali=@ADA_ALI_BASE@

includedir=${prefix}/${infix_inc}
projectdir=${prefix}/${infix_prj}
bindir=${prefix}/bin
libdir=${prefix}/${infix_lib}
alidir=${prefix}/${infix_ali}
dynamodir=${prefix}/share/dynamo

libname=libada_util
libprefix=$(libname)_

PROCESSORS=@NR_CPUS@
COVERAGE=no
MAKE_ARGS=-XMODE=${MODE} -XCOVERAGE=${COVERAGE} -XUTIL_LIBRARY_TYPE=${UTIL_LIBRARY_TYPE} -XPROCESSORS=$(PROCESSORS)
ifeq ($(UTIL_LIBRARY_TYPE),relocatable)
MAKE_ARGS += -XXMLADA_BUILD=relocatable -XAWS_BUILD=relocatable
MAKE_ARGS += -XLIBRARY_TYPE=relocatable
endif

MAKE_ARGS += -XHARDWARE_PLATFORM=@HARDWARE_PLATFORM@

# The timeout execution time in second for a test case.
# The concurrent fifo test takes arround 120 seconds on some ARM but only 4 seconds on an i7.
# Make this a make configuration variable so that it can be given when launching make.
TEST_TIMEOUT=30

ifeq (${BUILDS_SHARED},yes)
all:     static shared
install: uninstall install_static install_shared install-info
else
all:     static
install: uninstall install_static install-info
endif

UTIL_GEN_FILES=src/util-systems-constants.ads
UTIL_GEN_FILES+=src/util-systems-types.ads
ifeq (${HAVE_CURL},yes)
UTIL_GEN_FILES+=src/http/curl/util-http-clients-curl-constants.ads
endif

# Build executables for all mains defined by the project.
build:	setup
	$(GNATMAKE) -m -p -P"$(GPRPATH)" $(MAKE_ARGS)
ifeq (${HAVE_CURL},yes)
	$(GNATMAKE) -m -p -P"$(UTIL_HTTP_CURL_GPRPATH)" $(MAKE_ARGS)
endif
ifeq (${HAVE_AWS},yes)
	$(GNATMAKE) -m -p -P"$(UTIL_HTTP_AWS_GPRPATH)" $(MAKE_ARGS)
endif
	$(GNATMAKE) -m -p -P"$(TESTUTIL_GPRPATH)" $(MAKE_ARGS)
	$(GNATMAKE) -m -p -P"$(UTIL_HTTP_GPRPATH)" $(MAKE_ARGS)

setup: $(UTIL_GEN_FILES) obj/util/static lib/util/static obj/util-aws/static lib/util-aws/static

obj/util/static lib/util/static obj/util-aws/static lib/util-aws/static:
	mkdir -p $@

static:
	$(MAKE) UTIL_LIBRARY_TYPE=static build build-test

shared:
	$(MAKE) UTIL_LIBRARY_TYPE=relocatable build build-test

build-test: build regtests/util-testsuite.adb
	$(GNATMAKE) -p -Ptests_proc $(MAKE_ARGS)
	$(GNATMAKE) -p -Putil_tests $(MAKE_ARGS)

# Build and run the unit tests
test:	build-test
	-bin/util_harness -xml util-aunit.xml -timeout ${TEST_TIMEOUT}

regtests/util-testsuite.adb: regtests/util-testsuite.gpb Makefile
	gnatprep -DHAVE_XML=$(HAVE_XML) -DHAVE_CURL=$(HAVE_CURL) \
                 -DHAVE_AWS=$(HAVE_AWS) -DHAVE_VECTOR_MAPPERS=$(HAVE_VECTOR_MAPPERS) \
                 -DHAVE_LZMA=$(HAVE_LZMA) \
		 -DOS_VERSION='"$(OS_VERSION)"' \
		 regtests/util-testsuite.gpb $@

# Not intended for manual invocation.
# Invoked if automatic builds are enabled.
# Analyzes only on those sources that have changed.
# Does not build executables.
autobuild:
	$(GNATMAKE) -gnatc -c -k  -P "$(GPRPATH)"

CLEAN_FILES=$(UTIL_GEN_FILES) bin/util_harness bin/util_test_process bin/utilgen

# Clean the root project of all build products.
clean:	clean_test
	-rm -rf lib obj bin
	-rm -f $(CLEAN_FILES)

# Clean the files produced by the unit tests
clean_test:
	rm -f test?.log test.log test-stream.txt test-write.txt util-tests.xml
	rm -rf regtests/result

# Clean root project and all imported projects too.
clean_tree:
	$(GNATCLEAN) -q -P "$(GPRPATH)" -r

# Check *all* sources for errors, even those not changed.
# Does not build executables.
analyze:
	$(GNATMAKE) $(MAKE_ARGS) -f  -gnatc -c -k  -P "$(GPRPATH)"

# Clean, then build executables for all mains defined by the project.
rebuild: clean build

# Update src/util.ads with the latest SVN revision number.
version:
	gnatprep `svn info | grep '^[UR][eR][Lv]' | sed -e 's,URL: \(.*\),-DURL="\1",' -e 's,Revision: ,-DREVISION=,'` \
		  src/util.gpb src/util.ads

ifeq (${HAVE_PANDOC},yes)
ifeq (${HAVE_DYNAMO},yes)
doc:  doc/util-book.pdf doc/util-book.html
	$(DYNAMO) build-doc -markdown wiki

UTIL_DOC= \
  doc/title.md \
  doc/pagebreak.tex \
  doc/index.md \
  doc/pagebreak.tex \
  doc/Installation.md \
  doc/pagebreak.tex \
  doc/Util_Log.md \
  doc/pagebreak.tex \
  doc/Util_Properties.md \
  doc/pagebreak.tex \
  doc/Util_Dates.md \
  doc/pagebreak.tex \
  doc/Util_Beans.md \
  doc/pagebreak.tex \
  doc/Util_Http.md \
  doc/pagebreak.tex \
  doc/Util_Streams.md \
  doc/pagebreak.tex \
  doc/Util_Encoders.md \
  doc/pagebreak.tex \
  doc/Util_Events_Timers.md \
  doc/pagebreak.tex \
  doc/Util_Measures.md

DOC_OPTIONS=-f markdown -o doc/util-book.pdf --listings --number-sections --toc
HTML_OPTIONS=-f markdown -o doc/util-book.html --listings --number-sections --toc --css doc/pandoc.css

doc/util-book.pdf:  force
	$(DYNAMO) build-doc -pandoc doc
	pandoc $(DOC_OPTIONS) --template=./doc/eisvogel.tex $(UTIL_DOC)

doc/util-book.html: doc/util-book.pdf force
	pandoc $(HTML_OPTIONS) $(UTIL_DOC)
endif
endif

dist:
	git archive -o $(DIST_FILE) --prefix=$(distdir)/ HEAD

install_static:
	$(MAKE) UTIL_LIBRARY_TYPE=static install_lib

install_shared:
	$(MAKE) UTIL_LIBRARY_TYPE=relocatable install_lib

install_lib:
ifneq (${GPRINSTALL},)
	$(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(UTIL_LIBRARY_TYPE) $(GPRPATH)
	$(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(UTIL_LIBRARY_TYPE) $(TESTUTIL_GPRPATH)
	$(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(UTIL_LIBRARY_TYPE) $(UTIL_HTTP_GPRPATH)
ifeq (${HAVE_CURL},yes)
	$(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(UTIL_LIBRARY_TYPE) $(UTIL_HTTP_CURL_GPRPATH)
endif
ifeq (${HAVE_AWS},yes)
	$(GPRINSTALL) -p -f --prefix=${prefix} $(MAKE_ARGS) \
		--build-name=$(UTIL_LIBRARY_TYPE) $(UTIL_HTTP_AWS_GPRPATH)
endif
else
	rm -rf ${alidir}/ada-util-curl \
	       ${alidir}/ada-util-aws \
	       ${alidir}/ada-util-unit \
	       ${alidir}/ada-util
	$(MKDIR) -p ${includedir}/ada-util
	$(MKDIR) -p ${includedir}/ada-util-unit
	$(MKDIR) -p ${projectdir}/
	${MKDIR} -p ${alidir}/ada-util-unit
	${MKDIR} -p ${alidir}/ada-util
	${MKDIR} -p ${libdir} ${bindir}
	${CP} -p testutil/*.ad[bs] ${includedir}/ada-util-unit
	${CP} -p src/*.ad[bs] ${includedir}/ada-util
	${CP} -p src/http/*.ad[bs] ${includedir}/ada-util
	if test T${XML_SRC_DIR} != T ; then \
	   ${CP} -p ${XML_SRC_DIR}/*.ad[bs] ${includedir}/ada-util ; \
	fi
	if test T${ASM_SRC_DIR} != T ; then \
	   ${CP} -p ${ASM_SRC_DIR}/*.ad[bs] ${includedir}/ada-util ; \
	fi
	if test T${OS_SRC_DIR} != T ; then \
	   ${CP} -p ${OS_SRC_DIR}/*.ad[bs] ${includedir}/ada-util ; \
	fi
	if test T${AUNIT_SRC_DIR} != T ; then \
	   ${CP} -p ${AUNIT_SRC_DIR}/*.ad[bs] ${includedir}/ada-util-unit ; \
	fi
	if test T${AHVEN_SRC_DIR} != T ; then \
	   ${CP} -p ${AHVEN_SRC_DIR}/*.ad[bs] ${includedir}/ada-util-unit ; \
	   ${CP} -p ${AHVEN_SRC_OS_DIR}/*.ad[bs] ${includedir}/ada-util-unit ; \
	fi
	test T${HAVE_PRJ_DIRECTORIES} = Tyes || \
	  sed -e "s,ALI_INSTALL,${alidir},g" \
		  -e "s,LIB_INSTALL,${libdir},g" \
		  -e "s,BIN_INSTALL,${bindir},g" \
		  -e "s,INCLUDE_INSTALL,${includedir},g" \
		  < distrib/util_config-default.gpr > ${projectdir}/util_config.gpr
	test T${HAVE_PRJ_DIRECTORIES} = Tno || \
	  ${CP} distrib/util_config-directories.gpr ${projectdir}/util_config.gpr
	sed -e "s,LIBRARY_TYPE,$(UTIL_LIBRARY_TYPE),g" < distrib/util.gpr > ${projectdir}/util.gpr
	sed -e "s,LIBRARY_TYPE,$(UTIL_LIBRARY_TYPE),g" < distrib/util_unit.gpr > ${projectdir}/util_unit.gpr
	sed -e "s,LIBRARY_TYPE,$(UTIL_LIBRARY_TYPE),g" < distrib/util_http.gpr > ${projectdir}/util_http.gpr
	test T${HAVE_CURL} = Tno || \
	     sed -e "s,LIBRARY_TYPE,$(UTIL_LIBRARY_TYPE),g" \
		 < distrib/util_http_curl.gpr > ${projectdir}/util_http_curl.gpr
	test T${HAVE_AWS} = Tno || \
	     sed -e "s,LIBRARY_TYPE,$(UTIL_LIBRARY_TYPE),g" \
		 < distrib/util_http_aws.gpr > ${projectdir}/util_http_aws.gpr
	test T${HAVE_CURL} = Tno || \
	  (${MKDIR} -p ${includedir}/ada-util-curl && \
           ${MKDIR} -p ${alidir}/ada-util-curl && \
	   ${CP} -p src/http/curl/*.ad[bs] ${includedir}/ada-util-curl && \
	   ${CP} -p lib/util-curl/$(UTIL_LIBRARY_TYPE)/*.ali ${alidir}/ada-util-curl)
	test T${HAVE_AWS} = Tno || \
	  (${MKDIR} -p ${includedir}/ada-util-aws && \
           ${MKDIR} -p ${alidir}/ada-util-aws && \
	   ${CP} -p src/http/aws/*.ad[bs] ${includedir}/ada-util-aws && \
	   ${CP} -p lib/util-aws/$(UTIL_LIBRARY_TYPE)/*.ali ${alidir}/ada-util-aws)
	${CP} -p lib/testutil/$(UTIL_LIBRARY_TYPE)/*.ali ${alidir}/ada-util-unit
	${CP} -p lib/util/$(UTIL_LIBRARY_TYPE)/*.ali ${alidir}/ada-util
ifeq ($(UTIL_LIBRARY_TYPE),static)
	test T${HAVE_AWS} = Tno || \
	   ${CP} -p lib/util-aws/$(UTIL_LIBRARY_TYPE)/$(libprefix)aws.a ${libdir}/
	test T${HAVE_CURL} = Tno || \
	   ${CP} -p lib/util-curl/$(UTIL_LIBRARY_TYPE)/$(libprefix)curl.a ${libdir}/
	${CP} -p lib/util/$(UTIL_LIBRARY_TYPE)/$(libname).a ${libdir}/
	${CP} -p lib/testutil/$(UTIL_LIBRARY_TYPE)/$(libprefix)unit.a ${libdir}/
else
	test T${HAVE_AWS} = Tno || \
	   ${CP} -p lib/util-aws/$(UTIL_LIBRARY_TYPE)/$(libprefix)aws.$(LIBVER) ${libdir}/
	test T${HAVE_CURL} = Tno || \
	   ${CP} -p lib/util-curl/$(UTIL_LIBRARY_TYPE)/$(libprefix)curl.$(LIBVER) ${libdir}/
	${CP} -p lib/util/$(UTIL_LIBRARY_TYPE)/$(libname).$(LIBVER) ${libdir}/
	${CP} -p lib/testutil/$(UTIL_LIBRARY_TYPE)/$(libprefix)unit.$(LIBVER) ${libdir}/
ifneq (${OS},Windows_NT)
	cd ${libdir} && \
	rm -f $(libname).$(LIBEXT) $(libprefix)unit.$(LIBEXT) && \
	rm -f $(libprefix)aws.$(LIBEXT) $(libprefix)curl.$(LIBEXT) && \
	${LN} $(libname).$(LIBVER) $(libname).$(LIBEXT) && \
	${LN} $(libprefix)unit.$(LIBVER) $(libprefix)unit.$(LIBEXT) && \
	(test T${HAVE_AWS} = Tno || \
	   ${LN} $(libprefix)aws.$(LIBVER) $(libprefix)aws.$(LIBEXT)) && \
	(test T${HAVE_CURL} = Tno || \
	   ${LN} $(libprefix)curl.$(LIBVER) $(libprefix)curl.$(LIBEXT))
else
	${CP} -p lib/util/$(UTIL_LIBRARY_TYPE)/$(libname).$(LIBVER) ${bindir}/
	${CP} -p lib/testutil/$(UTIL_LIBRARY_TYPE)/$(libprefix)unit.$(LIBVER) ${bindir}/
endif
endif
endif

install-info:
ifeq (${GPRINSTALL},)
	@echo "Installation directories:"
	@echo "  Ada source files:    ${includedir}"
	@echo "  ALI files:           ${alidir}"
	@echo "  Libraries:           ${libdir}"
	@echo "  GNAT project:        ${projectdir}"
endif
	@echo "Environment setup:"
	@echo "  export ADA_PROJECT_PATH=${projectdir}:$$ADA_PROJECT_PATH"

install-support:
	$(MKDIR) -p ${bindir}
	${CP} support/*.sh ${bindir}
	${CP} support/*.xsl ${bindir}

uninstall:
ifneq (${GPRINSTALL},)
	-$(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(GPRPATH)
	-$(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(TESTUTIL_GPRPATH)
	-$(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(UTIL_HTTP_GPRPATH)
	-test T${HAVE_CURL} = Tno || \
	 $(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(UTIL_HTTP_CURL_GPRPATH)
	-test T${HAVE_AWS} = Tno || \
	 $(GPRINSTALL) -q -f --prefix=${prefix} $(MAKE_ARGS) --uninstall $(UTIL_HTTP_AWS_GPRPATH)
else
	rm -rf ${includedir}/ada-util ${includedir}/ada-util-unit ${includedir}/ada-util-curl ${includedir}/ada-util-aws
	rm -rf ${alidir}/ada-util ${alidir}/ada-util-unit ${alidir}/ada-util-curl ${alidir}/ada-util-aws  ${alidir}/ada-util-unit
	rm -f ${libdir}/$(libname).a
	rm -f ${libdir}/$(libprefix)curl.a ${libdir}/$(libprefix)curl.$(LIBEXT)  ${libdir}/$(libprefix)curl.$(LIBEXT).${version}
	rm -f ${libdir}/$(libprefix)aws.a ${libdir}/$(libprefix)aws.$(LIBEXT) ${libdir}/$(libprefix)aws.$(LIBEXT).${version}
	rm -f ${libdir}/$(libprefix)unit.a ${libdir}/$(libprefix)unit.$(LIBEXT) ${libdir}/$(libprefix)unit.$(LIBEXT).${version}
	rm -f ${libdir}/$(libname).so.${version}
	rm -f ${libdir}/$(libprefix)unit.so.${version}
	rm -f ${projectdir}/util_http_aws.gpr
	rm -f ${projectdir}/util_http_curl.gpr
	rm -f ${projectdir}/util_http.gpr
	rm -f ${projectdir}/util_unit.gpr
	rm -f ${projectdir}/util.gpr
endif

src/util-systems-constants.ads:	bin/utilgen
	bin/utilgen > $@

src/util-systems-types.ads:	bin/utilgen
	bin/utilgen types > $@

src/http/curl/util-http-clients-curl-constants.ads:	bin/utilgen
	bin/utilgen curl > $@

# Utility for the generation of util-systems-constants.ads
bin/utilgen:    support/utilgen.c Makefile
	mkdir -p bin
	$(CC) -o $@ $(CFLAGS) -g support/utilgen.c

force:
